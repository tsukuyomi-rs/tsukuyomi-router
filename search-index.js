var N=null,E="",T="t",U="u",searchIndex={};
var R=["tsukuyomi_router","Returns a reference to the data associated with this…","option","endpointid","result","endpoint","recognize","try_from","borrow","type_id","borrow_mut","try_into","to_owned","clone_into","typeid","formatter","Endpoint","Recognize","EndpointId"];

searchIndex[R[0]]={"doc":"An experimental implementation of HTTP router for…","i":[[3,R[16],R[0],"An endpoint in `Router`.",N,N],[3,R[18],E,"The identifier of `Endpoint`.",N,N],[3,"Error",E,E,N,N],[3,"Params",E,"A set of captured parameter values from an HTTP path.",N,N],[3,R[17],E,"A value that contains the recognition result of the router.",N,N],[3,"Router",E,"An HTTP router.",N,N],[11,"id",E,"Returns the identifier associated with this endpoint.",0,[[["self"]],[R[3]]]],[11,"path",E,"Returns the original path of this endpoint.",0,[[["self"]],["str"]]],[11,"data",E,R[1],0,[[["self"]],[T]]],[11,"data_mut",E,R[1],0,[[["self"]],[T]]],[11,"get",E,"Finds a parameter value by position.",1,[[["self"],["usize"]],[["str"],[R[2],["str"]]]]],[11,"name",E,"Finds a parameter value by name.",1,[[["str"],["self"]],[["str"],[R[2],["str"]]]]],[11,"get_wildcard",E,"Returns the value of extracted wildcard parameter if…",1,[[["self"]],[["str"],[R[2],["str"]]]]],[11,"into_owned",E,"Clones the internal values if they are borrowed.",1,[[],["params"]]],[11,"new",E,"Create an empty router.",2,[[],["self"]]],[11,"add_route",E,"Adds a route to this router.",2,[[["str"],["self"],[T]],[[R[4],[R[3]]],[R[3]]]]],[11,"add_scope",E,"Adds a scope to this router.",2,[[["str"],["self"],[T]],[[R[4],[R[3]]],[R[3]]]]],[11,R[5],E,"Returns a reference to the endpoint with the specified ID.",2,[[[R[3]],["self"]],[[R[2],[R[5]]],[R[5]]]]],[11,"endpoint_mut",E,"Returns a mutable reference to the endpoint with the…",2,[[["self"],[R[3]]],[[R[2],[R[5]]],[R[5]]]]],[11,R[6],E,"Searches for the route(s) matching the provided path.",2,[[["str"],["self"]],[R[6]]]],[11,"route",E,"Returns a reference to the matched route if possible.",3,[[["self"]],[R[2]]]],[11,"scope",E,"Returns a reference to the matched scope if possible.",3,[[["self"]],[R[2]]]],[6,"Result",E,E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[[U]],[R[4]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[[T],["self"]]]],[11,R[7],E,E,4,[[[U]],[R[4]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[14]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[],[R[4]]]],[11,"equivalent",E,E,4,[[["k"],["self"]],["bool"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,"to_string",E,E,5,[[["self"]],["string"]]],[11,R[7],E,E,5,[[[U]],[R[4]]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[14]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[[T],["self"]]]],[11,R[7],E,E,1,[[[U]],[R[4]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[4]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[14]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[7],E,E,2,[[[U]],[R[4]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[4]]]],[11,"eq",E,E,4,[[[R[3]],["self"]],["bool"]]],[11,"ne",E,E,4,[[[R[3]],["self"]],["bool"]]],[11,"clone",E,E,4,[[["self"]],[R[3]]]],[11,"clone",E,E,1,[[["self"]],["params"]]],[11,"from",E,E,5,[[["str"]],["self"]]],[11,"from",E,E,5,[[["string"]],["self"]]],[11,"default",E,E,2,[[],["self"]]],[11,"deref_mut",E,E,0,[[["self"]]]],[11,"fmt",E,E,5,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,4,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,0,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,2,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,3,[[[R[15]],["self"]],[R[4]]]],[11,"fmt",E,E,5,[[[R[15]],["self"]],[R[4]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"deref",E,E,0,[[["self"]]]],[11,"index",E,E,1,[[["self"],["usize"]]]],[11,"index",E,E,1,[[["self"],["str"]]]],[11,"index",E,E,2,[[[R[3]],["self"]]]],[11,"index_mut",E,E,2,[[["self"],[R[3]]]]],[11,"source",E,E,5,[[["self"]],[[R[2],["error"]],["error"]]]]],"p":[[3,R[16]],[3,"Params"],[3,"Router"],[3,R[17]],[3,R[18]],[3,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);